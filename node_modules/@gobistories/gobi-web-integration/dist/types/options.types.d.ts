export interface Options {
    container?: string | Element;
    color?: string;
    verticalOrientation?: boolean;
    animatedBubble?: boolean;
    bubbleSize?: string;
    showPlayIcon?: boolean;
    playIconUrl?: string;
    hideTitle?: boolean;
    wrap?: boolean;
    isFullHeightMobile?: boolean;
    align?: 'left' | 'right' | 'end' | 'start' | 'center';
    autoSegue?: boolean;
    stories?: Array<StoryOptions>;
    showEmptyStories?: boolean;
    openInPlayerPage?: boolean;
    fullScreenPlayer?: boolean;
    closeModalOnStoryEnd?: boolean;
    noShade?: boolean;
    zIndex?: number;
    disableShadowDom?: boolean;
    on?: {
        loaded?: () => void;
        close?: () => void;
        open?: (storyId: string) => false | void;
    };
    playerOptions?: Partial<PlayerOptions>;
    titleFontSize?: string;
    titleFontColor?: string;
    titleFontFamily?: string;
    titleFontWeight?: string;
}
export interface PlayerOptions {
    id?: number;
    container?: string;
    autoStart: boolean;
    autoStartWithSound: boolean;
    savePosition: boolean;
    loop: boolean;
    width: number;
    height: number;
    roundedCorners: boolean;
    shadow: boolean;
    storyId?: string;
    checkViewPort: boolean;
    playButton: boolean;
    on?: Partial<{
        [key in EventNames]: () => void;
    }>;
    useMediaProxy?: boolean;
    apiBaseUrl?: string;
}
export interface StoryOptions {
    id: string;
    thumbnailUrl?: string;
    bubbleSrc?: string;
    title?: string;
}
export declare enum EventNames {
    play = "videoPlay",
    pause = "videoPause",
    ended = "videoComplete",
    close = "close",
    backToChapter = "clickPrevious",
    skipChapter = "clickNext",
    newIteration = "newIteration",
    error = "error",
    loaded = "loaded"
}
